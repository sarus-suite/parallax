name: Run on Zinal

on:
  push:
    branches:
      - 'fc-*'

jobs:
  build:
    runs-on: zinal
    steps:
      - name: Setup temporary dir
        run: |
          TMP_DIR=$(mktemp -d)
          echo "TMP_DIR=$TMP_DIR" >> $GITHUB_ENV
          echo "Using temp directory: $TMP_DIR" 

      - name: Manually clone repo within tmp dir
        run: git clone --depth 1 --branch "${GITHUB_REF_NAME}" https://github.com/${GITHUB_REPOSITORY}.git
        working-directory: ${{ env.TMP_DIR }}

      - name: List contents of TMP_DIR
        run: ls -la
        working-directory: ${{ env.TMP_DIR }}

      - name: Run build inside Podman container
        run: |
          podman run --rm \
          -v "$PWD":"$PWD":Z \
          -v "$TMP_DIR":"$TMP_DIR":Z \
          -w "$PWD" \
          --env TMP_DIR="$TMP_DIR" \
          --env GITHUB_REF_NAME="$GITHUB_REF_NAME" \
          ghcr.io/sarus-suite/parallax/ci-runner:latest \
          bash -euxc '
            mkdir -p $TMP_DIR/dist

            go version

            export VER=opensuse-15.5
            export HOST_ARCH="$(go env GOHOSTARCH)"
            #export OUT="parallax-${GITHUB_REF_NAME}-${VER}-${HOST_ARCH}"
            export OUT="parallax"

            go get .
        
            export CGO_ENABLED=1
            export CC=gcc
            export GOFLAGS="-buildvcs=false"
            export GO_LDFLAGS="-linkmode external"
            export CGO_LDFLAGS="-g -O2"
            export GOARCH="$HOST_ARCH"
            export GOOS=linux

            go build -v \
              -o "$TMP_DIR/dist/$OUT" \
              .
           echo Built binary: "$TMP_DIR/dist/$OUT"
           '
        working-directory: ${{ env.TMP_DIR }}/parallax

      - name: Install Bats locally
        run: |
          git clone --depth 1 https://github.com/bats-core/bats-core.git "$TMP_DIR/bats-core"
          "$TMP_DIR/bats-core/install.sh" "$TMP_DIR/bats"
        working-directory: ${{ env.TMP_DIR }}

      - name: Testing podman run
        run: |
          export PODMAN_BINARY=$(which podman)
          $PODMAN_BINARY version
          export PARALLAX_BINARY=$TMP_DIR/dist/parallax
          $PARALLAX_BINARY --version
        working-directory: ${{ env.TMP_DIR}}

      - name: Simple parallax test
        run: |
          # Setup env
          export PODMAN_BINARY=$(which podman)
          export PARALLAX_BINARY=$TMP_DIR/dist/parallax
          export MOUNT_PROGRAM_PATH=$TMP_DIR/parallax/scripts/parallax-mount-program.sh
          export PARALLAX_MP_SQUASHFUSE_FLAG="-o nonempty"
          export PODMAN_ROOT="$(mktemp -d)"
          export PODMAN_RUNROOT="$(mktemp -d)"
          export RO_STORAGE="$(mktemp -d)"
          export CLEAN_ROOT="$(mktemp -d)"
          export MKSQUASHFS_PATH="$(command -v mksquashfs)"

          # Test podman + parallax
          "$PODMAN_BINARY" \
            --root "$PODMAN_ROOT" \
            --runroot "$PODMAN_RUNROOT" \
            pull busybox:latest

          "$PARALLAX_BINARY" \
            --podmanRoot "$PODMAN_ROOT" \
            --roStoragePath "$RO_STORAGE" \
            --mksquashfsPath "$MKSQUASHFS_PATH" \
            --log-level info \
            --migrate \
            --image busybox:latest

          "$PODMAN_BINARY" \
            --root "$CLEAN_ROOT" \
            --runroot "$PODMAN_RUNROOT" \
            --storage-opt additionalimagestore=$RO_STORAGE \
            --storage-opt mount_program=$MOUNT_PROGRAM_PATH \
            images

          "$PODMAN_BINARY" \
            --root "$CLEAN_ROOT" \
            --runroot "$PODMAN_RUNROOT" \
            --storage-opt additionalimagestore=$RO_STORAGE \
            --storage-opt mount_program=$MOUNT_PROGRAM_PATH \
            run --rm $PODMAN_RUN_OPTIONS busybox:latest echo ok

          # clean up
          "$PODMAN_BINARY" \
            --root "$PODMAN_ROOT" \
            --runroot "$PODMAN_RUNROOT" \
            --storage-opt mount_program=$MOUNT_PROGRAM_PATH \
            rmi --all

          rm -rf "$PODMAN_ROOT"
          rm -rf "$PODMAN_RUNROOT"
          rm -rf "$RO_STORAGE"
          rm -rf "$CLEAN_ROOT"
        working-directory: ${{ env.TMP_DIR}}

          #      - name: Run Bats tests
          #        run: |
          #          export PODMAN_BINARY=$(which podman)
          #          export PARALLAX_BINARY=$TMP_DIR/dist/parallax
          #          export MOUNT_PROGRAM_PATH=$TMP_DIR/parallax/scripts/parallax-mount-program.sh
          #          cd parallax
          #          $TMP_DIR/bats/bin/bats tests
          #        working-directory: ${{ env.TMP_DIR}}

